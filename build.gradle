plugins {
    id 'idea'
    id 'groovy'
    id 'codenarc'
    id 'com.energizedwork.webdriver-binaries' version '1.0'
}

group = 'di'
version = '1.0.2'
project.description = 'This gradle test automation project is built for quick start of api/sftp testing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    groovyVersion = '2.4.11'
    cucumberVersion = '2.0.1'
    cucumberReportVersion = '1.3'
    junitVersion = '4.12'
    hamcrestVersion = '2.0.0.0'
    wsliteVersion = '1.1.3'
    wireMockVersion = '2.7.1'
    slf4jVersion = '1.7.25'
    snakeyamlVersion = '1.18'
    gebVersion = '2.0'
    seleniumVersion = '3.6.0'
}

repositories {
    jcenter()
}

dependencies {
    // groovy
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    // cucumber, cucumber-junit and cucumber-report
    compile "io.cucumber:cucumber-groovy:$cucumberVersion"
    testCompile "io.cucumber:cucumber-junit:$cucumberVersion"
    compile "com.github.mkolisnyk:cucumber-runner:$cucumberReportVersion"

    // junit and hamcrest
    testCompile "junit:junit:$junitVersion"
    testCompile "org.hamcrest:hamcrest-junit:$hamcrestVersion"

    // groovy-wslite
    compile "com.github.groovy-wslite:groovy-wslite:$wsliteVersion"

    // wiremock
    compile "com.github.tomakehurst:wiremock:$wireMockVersion"

    // jsch
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'

    // Geb
    testCompile "org.gebish:geb-junit4:$gebVersion"

    // Driver
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"

    // Simple Log4j
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    testCompile "org.slf4j:slf4j-simple:$slf4jVersion"

    // Snakeyaml
    compile "org.yaml:snakeyaml:$snakeyamlVersion"
}


webdriverBinaries {
    chromedriver '2.33'
}

sourceSets {
    cucumberTest {
        groovy {
            srcDirs = ['src/cucumberTest/groovy']
        }
        resources {
            srcDirs = ['src/cucumberTest/resources']
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    cucumberTestCompile.extendsFrom testCompile
    cucumberTestRunTime.extendsFrom testRunTime
}

defaultTasks 'cucumberTest'

task cucumberTest(type: Test, dependsOn: cleanTest) {
    description 'Runs all cucumber tests through Cucumber JUnit'

    // bypass up-to-date check to run tests every time
    outputs.upToDateWhen { false }

    // setup test dir and classpath
    setTestClassesDirs sourceSets.cucumberTest.output.classesDirs
    classpath = sourceSets.cucumberTest.runtimeClasspath

    // set a system property for the test JVM(s) - for cucumber options
    systemProperty 'cucumber.options', System.properties.getProperty('cucumber.options')

    // set up basic slf4j properties
    systemProperty 'org.slf4j.simpleLogger.showDateTime', 'true'
    systemProperty 'org.slf4j.simpleLogger.dateTimeFormat', 'yyyy-MM-dd\'T\'HH:mm:ss'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // disable default html report
    reports {
        html.enabled = false
    }

    // execute cucumberReport task at the last
    finalizedBy 'cucumberReport'
}

task cucumberReport(type: JavaExec, dependsOn: 'classes') {
    description 'Executes groovy script to create customized cucumber reports'

    classpath = sourceSets.main.runtimeClasspath
    main = 'utility/ReportGeneration'
}

// Codenarc - Execute Groovy code static analysis
codenarcMain {
    configFile file('src/main/resources/codenarc.groovy')
    ignoreFailures true
}

codenarcTest {
    configFile file('src/main/resources/codenarc.groovy')
    ignoreFailures true
}

codenarcCucumberTest {
    configFile file('src/main/resources/codenarc.groovy')
    ignoreFailures true
}
