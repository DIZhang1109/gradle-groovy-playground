/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Di' at '8/08/17 12:18 PM' with Gradle 2.12
 *
 * This generated file contains a sample Groovy project to get you started.
 * For more details take a look at the Groovy Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.12/userguide/tutorial_groovy_projects.html
 */
plugins {
    id 'idea'
    id 'groovy'
    id 'codenarc'
}

group = 'di.zhang'
version = '1.0.0'
description = 'This gradle test automation project is built for quick start of api testing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    groovyVersion = '2.4.11'
    cucumberVersion = '1.2.5'
    cucumberReportVersion = '1.0.11'
    spockVersion = '1.0-groovy-2.4'
    junitVersion = '4.12'
    hamcrestVersion = '2.0.0.0'
    wsliteVersion = '1.1.3'
    wireMockVersion = '2.7.1'
    slf4jVersion = '1.7.25'
    snakeyamlVersion = '1.18'
}

dependencies {
    // Groovy
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    // Cucumber, Cucumber JUnit and Cucumber Report
    compile "info.cukes:cucumber-groovy:$cucumberVersion"
    testCompile "info.cukes:cucumber-junit:$cucumberVersion"
    compile "com.github.mkolisnyk:cucumber-runner:$cucumberReportVersion"

    // Spock and JUnit
    testCompile "org.spockframework:spock-core:$spockVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.hamcrest:hamcrest-junit:$hamcrestVersion"

    // WS Lite
    compile "com.github.groovy-wslite:groovy-wslite:$wsliteVersion"

    // Wiremock
    compile "com.github.tomakehurst:wiremock:$wireMockVersion"

    // Simple Log4j
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    testCompile "org.slf4j:slf4j-simple:$slf4jVersion"

    // Snakeyaml
    compile "org.yaml:snakeyaml:$snakeyamlVersion"
}

sourceSets {
    cucumberTest {
        groovy {
            srcDirs = ['src/cucumberTest/groovy']
        }
        resources {
            srcDirs = ['src/cucumberTest/resources']
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    cucumberTestCompile.extendsFrom testCompile
    cucumberTestRunTime.extendsFrom testRunTime
}

defaultTasks 'cucumberTest'

task cucumberTest(type: Test, dependsOn: cleanTest) {
    description 'Runs all cucumber tests through Cucumber JUnit'

    // bypass up-to-date check to run tests every time
    outputs.upToDateWhen { false }

    // Setup test dir and classpath
    setTestClassesDirs sourceSets.cucumberTest.output.classesDirs
    classpath = sourceSets.cucumberTest.runtimeClasspath

    // set a system property for the test JVM(s) - for cucumber options
    systemProperty 'cucumber.options', System.properties.getProperty('cucumber.options')

    // set up basic slf4j properties
    systemProperty 'org.slf4j.simpleLogger.showDateTime', 'true'
    systemProperty 'org.slf4j.simpleLogger.dateTimeFormat', 'yyyy-MM-dd\'T\'HH:mm:ss'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // runs cucumber report
    finalizedBy 'cucumberReport', 'wrapText'

    // runs codenarc report
    finalizedBy codenarcMain, codenarcTest, codenarcCucumberTest
}

task cucumberReport(type: JavaExec, dependsOn: 'classes') {
    description 'Executes groovy script to create customized cucumber reports'

    main = 'utility/ReportGeneration'
    classpath = sourceSets.main.runtimeClasspath
}

task wrapText {
    description 'Beautify XML in cucumber reports'

    doLast {
        def reportFilePath = "$buildDir/cucumber-reports/html-report/cucumber-results-agg-test-results.html"
        def reportFile = new File(reportFilePath).text.replaceAll('font-family:courier;font-weight:normal;font-size:small;color:black;border:1px dashed black;background-color:silver', 'font-family:courier;font-weight:normal;font-size:small;color:black;border:1px dashed black;background-color:silver;white-space:pre-wrap;')
        new File(reportFilePath).write(reportFile)
    }
}

codenarcMain {
    configFile file('src/test/resources/codenarc.groovy')
    ignoreFailures true
}

codenarcTest {
    configFile file('src/test/resources/codenarc.groovy')
    ignoreFailures true
}

codenarcCucumberTest {
    configFile file('src/test/resources/codenarc.groovy')
    ignoreFailures true
}
